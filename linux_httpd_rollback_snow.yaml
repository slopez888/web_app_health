- name: software patch demo (httpd using yum package manager) with rollback
  hosts: all
  vars:
    username: 
    password:
    instance: 
    package: httpd

  tasks:
   - name: Get package version
     yum:
       list: "{{ package }}"
     register: software_version
     become: true

   - name: Read which version is installed and available
     set_fact:
       software_update: false
       software_version_installed: "{{ software_version | json_query(\"results[?yumstate=='installed'].release\") | last }}"
       software_version_available: "{{ software_version | json_query(\"results[?yumstate=='available'].release\") }}"
   - debug:
       var: software_version_installed
   - debug:
       var: software_version_available

   - name: include vars
     include_vars: incident_vars.yaml

   - name: SERVICENOW incident created if Available Software Update for "{{ package }}" from Vendor detected
     snow_record:
       username: "{{username}}"
       password: "{{password}}"
       instance: dev71983
       state: present
       table: incident
       data:
         short_description: "Software Update Available on {{inventory_hostname}} was found for Software Package {{ package }}. However, the minimum version to upgrade to a newer certified version is too old and requires new dependencies."
         severity: 1
         priority: 2
         approval: requested
         caller_id: "System Administrator"
         comments: "An automated software version update check on {{inventory_hostname}} found an update available from the vendor. However the current version is too old and dependencies need to be installed for the latest cerfified release. \n--------\n The current version of software is {{software_version_installed}}.\n--------\n The available version(s) of software is/are {{software_version_available}} . Recommendation: The newer dependencies should be installed before updating to the new certified version of the package. This version needs to be approved by the application/package owner before proceeding with patching process. Do you wish to proceed? Please approve this ticket if so. This ticket was generated by Ansible Tower API call.\n--------\n "
     register: snow_var
     delegate_to: localhost
     when: software_version_installed=="31.el7_1.1"
   
   - name: DEBUG SNOW_VAR
     debug:
       var: snow_var.record.number


  # - name: Patch "{{ package }}" to latest certified version
  #   yum:
  #     name: "{{ package }}"
  #     state: latest
  #   become: true
#
  # - name: SERVICENOW incident updated and resolved if patch update process succeeded
  #   snow_record:
  #      username: "{{username}}"
  #      password: "{{password}}"
  #      instance: "{{instance}}"
  #      number: "{{snow_var.record.number}}"
  #      state: present
  #      table: incident
  #      data:
  #        caller_id: "System Administrator"
  #        comments: "The software update process has now succeeded on {{inventory_hostname}} for software package {{package}}. This ticket was resolved by Ansible Tower API call in an update/patching playboook. \n--------\n The verification process will now start.\n--------\n "
  #        incident_state: 6
  #   register: snow_var
  #   delegate_to: localhost
#
  # - name: Get package version
  #   yum:
  #     list: "{{ package }}"
  #   register: patch_version
  #   become: true
#
  # - name: Verify latest certified version is installed and operational 
  #   set_fact:
  #     patch_version_installed: "{{ patch_version | json_query(\"results[?yumstate=='installed'].release\") }}"
  # - debug:
  #     var: patch_version_installed   
  #
  # - name: SERVICENOW incident closed if batch job validation succeeded
  #   snow_record:
  #      username: "{{username}}"
  #      password: "{{password}}"
  #      instance: "{{instance}}"
  #      number: "{{snow_var.record.number}}"
  #      state: present
  #      table: incident
  #      data:
  #        caller_id: "System Administrator"
  #        comments: "The upgraded version of softwar has now been validated on {{inventory_hostname}}. The validated upgrade software version is {{patch_version_installed}} This ticket was closed by Ansible Tower API call in a validation playboook. \n--------\n The update patching processing process has now been completed.\n--------\n "
  #        incident_state: 7
  #   register: snow_var
  #   delegate_to: localhost